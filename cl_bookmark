#!/usr/bin/env python
import sys
import os
import argparse

import bookmark

BM_LOC = os.path.expanduser("~/.cl_bookmark/bookmarks.json")
SUB_COMMANDS = ["add", "delete", "list", "search"]

def preprocess_cmd_line():
    mode = None
    args = list(enumerate(sys.argv[1:]))
    args.reverse()
    for i, arg in args:
        if arg in SUB_COMMANDS:
            mode = arg
            del sys.argv[i+1]
    return mode

def update_bm_json(bm, fname=None):
    fname = fname or BM_LOC
    dname = os.path.dirname(fname)
    if not os.path.isdir(dname):
        os.makedirs(dname)
    bookmark.to_json(bm, fname)

def retrieve_bm(fname=None):
    fname = fname or BM_LOC
    if fname is not None and os.path.exists(fname):
        print "Loading bookmarks from %s" % fname
        return bookmark.from_json(fname or BM_LOC)
    else:
        print "Making new bookmark file"
        return []

def parse_tags(tagstr=None):
    if tagstr is None:
        return None
    tags = set()
    for substr in tagstr:
        tags |= set(substr.split())
    return tags

mode = preprocess_cmd_line()
if mode is None and ("-h" not in sys.argv or "--help" not in sys.argv):
    print "No subcommand given, valid subcommands are %s" % ", ".join(SUB_COMMANDS)
argp = argparse.ArgumentParser()
argp.add_argument("-u", "--url", help="URL to bookmark")
argp.add_argument("-t", "--tags", action="append", help="Tags to apply to URL. Can either be given as \"tag1 tag2 tag3\" and / or multiple invocations of this option can be given.")
args = argp.parse_args()

tags = parse_tags(args.tags) or ()

bookmarks = retrieve_bm()

if mode == "add":
    print "Adding %s\n\twith tags: %s" % (args.url, ", ".join(tags))
    bookmarks.append(bookmark.Bookmark(args.url, tags=tags))
    update_bm_json(bookmarks)
if mode == "update":
    pass
elif mode == "delete":
    pass
elif mode == "search":
    pass
elif mode == "list":
    pass
