#!/usr/bin/env python
import sys
import os
import argparse
from urllib2 import urlparse
import webbrowser

import termcolor

import bookmark

BM_LOC = os.path.expanduser("~/.cl_bookmark/bookmarks.json")
SUB_COMMANDS = ["add", "delete", "search", "update", "open"]
usage = "Available subcommands: %s" % ", ".join(SUB_COMMANDS)

def preprocess_cmd_line():
    mode = None
    args = list(enumerate(sys.argv[1:]))
    args.reverse()
    for i, arg in args:
        if arg in SUB_COMMANDS:
            mode = arg
            del sys.argv[i+1]
    return mode

def update_bm_json(bm, fname=None):
    fname = fname or BM_LOC
    dname = os.path.dirname(fname)
    if not os.path.isdir(dname):
        os.makedirs(dname)
    bookmark.to_json(bm, fname)

def retrieve_bm(fname=None):
    fname = fname or BM_LOC
    if fname is not None and os.path.exists(fname):
        print "Loading bookmarks from %s" % fname
        return bookmark.from_json(fname or BM_LOC)
    else:
        print "Making new bookmark file"
        return []

def parse_tags(tagstr=None):
    if tagstr is None:
        return None
    tags = set()
    for substr in tagstr:
        tags |= set(map(unicode, substr.split()))
    return tags

def parse_file(fname, reject_invalid=True):
    new_bookmarks = []
    with open(fname) as urllist:
        for line in urllist.readlines():
            if not line:
                continue

            res = urlparse.urlparse(line)
            if not res.netloc and reject_invalid:
                print >>sys.stderr, "URL does not appear to be a valid web address. Rejecting.\nURL: %s" % line
                continue
            elif not res.netloc:
                print >>sys.stderr, "URL does not appear to be a valid web address. Continuing per request.\nURL: %s" % line

            new_bm = bookmark.Bookmark(line.strip())
            new_bm.update()
            new_bookmarks.append(new_bm)
            print new_bookmarks[-1]
    return new_bookmarks

def format_link(bm):
    return "%s://%s%s" % (termcolor.colored(bm._scheme, "blue", None, ["underline"]), \
        termcolor.colored(bm.url_domain, "cyan", None, ["underline"]), \
        termcolor.colored(bm._fullpath, "blue", None, ["underline"]))

def format_info(strn):
    return termcolor.colored(strn, None, None, ["reverse"])

def format_tag(strn):
    return termcolor.colored(strn, 'red', None, ["reverse"])

def format_descr(strn):
    return termcolor.colored(strn, 'grey', None, ["bold"])

mode = preprocess_cmd_line()
if mode is None and ("-h" not in sys.argv or "--help" not in sys.argv):
    print "No subcommand given, valid subcommands are %s" % ", ".join(SUB_COMMANDS)
argp = argparse.ArgumentParser(usage=usage)
argp.add_argument("-i", "--url-id", action="append", help="URL ID to address")
argp.add_argument("-u", "--url", help="URL to bookmark")
argp.add_argument("-t", "--tags", action="append", help="Tags to apply to URL. Can either be given as \"tag1 tag2 tag3\" and / or multiple invocations of this option can be given.")
argp.add_argument("-p", "--parse-list", help="Parse through a file, attempting to pull out as many URLs as possible, adding them to your bookmarks.")
args = argp.parse_args()

tags = parse_tags(args.tags) or set()

bookmarks = retrieve_bm()

if mode == "add":
    if args.url is None and args.parse_list is None:
        exit("Nothing to add. Use --url or --parse-list to indicate additions.")
    if args.url:
        print "Adding %s\n\twith tags: %s" % (args.url, ", ".join(tags))
        bm = bookmark.Bookmark(args.url, tags=tags)
        bm.update()
        bookmarks.append(bm)
    if args.parse_list:
        print "Parsing %s to look for URLs." % args.parse_list
        bookmarks.extend(parse_file(args.parse_list))
    update_bm_json(bookmarks)
elif mode == "update":
    pass
elif mode == "delete":
    del_idx = map(int, args.url_id) or []

    for i, bm in enumerate(bookmarks):
        if bm.url == args.url:
            del_idx.append(i)
            continue
        if tags and any([tag in bm.tags for tag in tags]):
            del_idx.append(i)
            continue

    print "Deleting %d URLs" % len(del_idx)
    del_idx = sorted(del_idx)
    del_idx.reverse()
    for i in sorted(del_idx):
        del bookmarks[i]
    update_bm_json(bookmarks)

elif mode == "search":
    if args.url:
        print "searching for url: %s" % bm.url
    if tags:
        print "searching for tags: %s" % ", ".join(tags)

    filter_cond = True
    if args.url is None and not tags:
        filter_cond = False

    def filter_urls(bms):
        return [bm.url != args.url and not (tags & bm.tags) for bm in bms]

    filter_idx = filter_urls(bookmarks)
    for i, bm in enumerate(bookmarks):
        #alive_resp = bm.check_alive()

        if filter_cond and filter_idx[i]:
            continue

        print "(%d) URL: %s (%s)" % (i, format_link(bm), "alive" if bm.is_alive else "not alive")
        if bm.title is not None:
            print "Description: %s" % format_descr(bm.title)
        import time
        DATETIME_FMT = "%b %d, %Y (%H:%M:%S) %Z"
        create = time.strftime(DATETIME_FMT, time.localtime(bm.created))
        access = time.strftime(DATETIME_FMT, time.localtime(bm.last_accessed))
        print "\tCreated %s\n\tLast accessed: %s" % (create, access)
        print "\tTags: %s" % ", ".join(map(format_tag, bm.tags))
    print format_info("Helpful hint: OS X Terminal users can use cmd + double click to open a link")
elif mode == "open":
    # FIXME: Do search then open
    if args.url_id:
        for url_id in map(int, args.url_id):
            webbrowser.open(bookmarks[url_id].url)
